1.Crie uma função que receba um slice de inteiros e retorne a média aritmética dos valores.

package main
import "fmt"
func calcularMedia(slice []int) float64 {
    if len(slice) == 0 {
        return 0.0
    }
    soma := 0
    for _, valor := range slice {
        soma += valor
    }
    media := float64(soma) / float64(len(slice))
    return media
}

2.Crie uma função que receba uma string e retorne a quantidade de vogais presentes.

package main
import (
	"fmt"
	"strings"
)
func contarVogais(texto string) int {
	qtdVogais := 0
	texto = strings.ToLower(texto)
	for _, char := range texto {
		switch char {
		case 'a', 'e', 'i', 'o', 'u':
			qtdVogais++
		}
	}
	return qtdVogais
}

3.Crie uma função que receba um slice de strings e retorne a concatenação de todas as strings.

package main
import "fmt"
func concatenarStrings(slice []string) string {
	resultado := ""
	for _, str := range slice {
		resultado += str
	}
	return resultado
}

4.Crie uma função que receba um slice de inteiros e retorne o segundo maior valor.

package main
import "fmt"
func segundoMaiorValor(slice []int) (int, error) {
	if len(slice) < 2 {
		return 0, fmt.Errorf("O slice deve ter pelo menos dois elementos")
	}
	maior := slice[0]
	segundoMaior := slice[1]
	if segundoMaior > maior {
		maior, segundoMaior = segundoMaior, maior
	}
	for _, valor := range slice[2:] {
		if valor > maior {
			segundoMaior = maior
			maior = valor
		} else if valor > segundoMaior && valor != maior {
			segundoMaior = valor
		}
	}
	return segundoMaior, nil
}

5.Crie uma função que receba um slice de inteiros e um valor inteiro, e retorne a posição do primeiro
elemento igual ao valor no slice. Caso não encontre, retorne -1.

package main
import "fmt"
func encontrarPosicao(slice []int, valor int) int {
	for i, v := range slice {
		if v == valor {
			return i
		}
	}
	return -1
}

6.Escreva uma função que receba um slice de strings como parâmetro e retorne uma string com todas as strings
concatenadas e separadas por vírgulas. Caso o slice esteja vazio, retorne um erro.

package main
import (
	"errors"
	"fmt"
	"strings"
)
func concatenarComVirgulas(slice []string) (string, error) {
	if len(slice) == 0 {
		return "", errors.New("O slice está vazio")
	}
	resultado := strings.Join(slice, ",")
	return resultado, nil
}

7.Crie uma função que receba um slice de inteiros e uma função como parâmetros. A função deve aplicar a função recebida 
em cada elemento do slice e retornar um novo slice com os resultados. Caso o slice esteja vazio, retorne um erro.

package main
import (
	"errors"
	"fmt"
)
func aplicarFuncaoEmCadaElemento(slice []int, funcao func(int) int) ([]int, error) {
	if len(slice) == 0 {
		return nil, errors.New("O slice está vazio")
	}
	resultados := make([]int, len(slice))
	for i, valor := range slice {
		resultados[i] = funcao(valor)
	}
	return resultados, nil
}
func dobrar(valor int) int {
	return valor * 2
}

8.Escreva uma função que receba um slice de inteiros como parâmetro e retorne um novo slice
com apenas os números pares contidos no slice. Caso o slice esteja vazio, retorne um erro.

package main
import (
	"errors"
	"fmt"
)
func numerosPares(slice []int) ([]int, error) {
	if len(slice) == 0 {
		return nil, errors.New("O slice está vazio")
	}
	pares := []int{}
	for _, valor := range slice {
		if valor%2 == 0 {
			pares = append(pares, valor)
		}
	}
	return pares, nil
}

9.Crie uma função que receba uma string como parâmetro e retorne um novo slice com todas as palavras contidas na string.
Considere que as palavras são separadas por espaços em branco. Caso a string seja vazia, retorne um erro.

package main
import (
	"errors"
	"fmt"
	"strings"
)
func extrairPalavras(texto string) ([]string, error) {
	if texto == "" {
		return nil, errors.New("A string está vazia")
	}
	palavras := strings.Fields(texto)
	return palavras, nil
}

10.Escreva uma função que receba um slice de inteiros como parâmetro e retorne um novo slice com os valores
ordenados de forma crescente.Caso o slice esteja vazio, retorne um erro.

package main
import (
	"errors"
	"fmt"
	"sort"
)
func ordenarCrescente(slice []int) ([]int, error) {
	if len(slice) == 0 {
		return nil, errors.New("O slice está vazio")
	}
	copia := make([]int, len(slice))
	copy(copia, slice)
	sort.Ints(copia)
	return copia, nil
}

11.Crie uma função que receba um número inteiro como parâmetro e retorne verdadeiro se ele for um número primo e falso caso contrário.
Caso o número seja negativo, retorne um erro.

package main
import (
	"errors"
	"fmt"
	"math"
)
func isPrimo(numero int) (bool, error) {
	if numero < 0 {
		return false, errors.New("O número não pode ser negativo")
	}
	if numero <= 1 {
		return false, nil
	}
	limite := int(math.Sqrt(float64(numero))) + 1
	for i := 2; i < limite; i++ {
		if numero%i == 0 {
			return false, nil
		}
	}
	return true, nil
}

12.
